import java.util.zip.GZIPOutputStream

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.example.demoapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.4"
    }
    namespace 'com.example.composeime'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.10"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation "androidx.compose.ui:ui:1.4.0"
    implementation "androidx.compose.material:material:1.4.0"
    implementation "androidx.compose.ui:ui-tooling:1.4.0"
    implementation "androidx.activity:activity-compose:1.7.0"
    implementation "androidx.lifecycle:lifecycle-service:2.6.1"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation "com.louiscad.splitties:splitties-systemservices:3.0.0"
    implementation "com.louiscad.splitties:splitties-views:3.0.0"
    implementation 'androidx.compose.material3:material3-android:1.3.1'
}




tasks.register("compressDictionary") {
    def sourceFile = layout.projectDirectory.file("src/main/res/raw/english_dictionary.txt")
    def outputFile = layout.projectDirectory.file("src/main/res/raw/english_dictionary.gz")

    inputs.file(sourceFile)
    outputs.file(outputFile)

    doLast {
        println "Compressing dictionary: ${sourceFile.asFile.absolutePath} -> ${outputFile.asFile.absolutePath}"

        outputFile.asFile.parentFile.mkdirs() // Ensure the output directory exists

        sourceFile.asFile.withInputStream { inputStream ->
            new GZIPOutputStream(new FileOutputStream(outputFile.asFile)).withCloseable { gzipOut ->
                inputStream.eachByte(1024) { buffer, bytesRead ->
                    gzipOut.write(buffer, 0, bytesRead)
                }
            }
        }

        println "Compression complete: ${sourceFile.asFile.length()} bytes -> ${outputFile.asFile.length()} bytes"
    }
}
